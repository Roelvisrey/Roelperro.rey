import tkinter as tk
from tkinter import font as tkfont

# Datos de ejemplo con productos adicionales
productos = {
    "Botella Sport": "Un accesorio esencial para mantenerte hidratado durante tus paseos.",
    "Casco Speed": "Casco ligero y aerodinámico para una mayor velocidad.",
    "Casco MTB": "Casco robusto para montar en terrenos accidentados.",
    "Botella Hydro": "Botella con capacidad para grandes distancias.",
    "Casco Aero": "Casco de alto rendimiento para ciclistas profesionales.",
    "Casco X-Pro": "Casco con diseño moderno y ventilación avanzada.",
    "Luces Frontal": "Luces LED potentes para una visibilidad nocturna.",
    "Luces Nocturnas": "Luces pequeñas para mejorar la seguridad en la oscuridad.",
    "Guantes Pro": "Guantes con excelente agarre y protección para largos recorridos.",
    "Chaqueta Lluvia": "Chaqueta resistente al agua para mantenerte seco en cualquier clima.",
    "Pantalones Ciclismo": "Pantalones cómodos y acolchados para un mejor confort en el sillín.",
    "Pedales Shimano": "Pedales de alta calidad para un mejor rendimiento en tus rutas.",
    "Portabidón": "Soporte para bidón que se ajusta a cualquier cuadro de bicicleta.",
    "Bombas Manual": "Bomba compacta y eficiente para mantener tus neumáticos a punto.",
    "Luces Traseras": "Luces LED traseras para una visibilidad óptima durante el día.",
    "Espejo Manillar": "Espejo para manillar que mejora la visibilidad de los vehículos que vienen por detrás.",
    "Sillín Deportivo": "Sillín ergonómico diseñado para mayor comodidad y rendimiento.",
    "Kit Reparación": "Kit completo para reparar pinchazos y problemas en ruta.",
    "Cinta Manillar": "Cinta antideslizante para mejorar el agarre del manillar.",
    "Funda Protectora": "Funda resistente al agua para proteger tu bicicleta de las inclemencias del tiempo."
}

compras_clientes = {
    "Carlos": ["Botella Sport", "Casco Aero"],
    "Ricardo": ["Casco MTB", "Botella Hydro"],
    "Ana": ["Casco Speed", "Casco X-Pro"],
    "Luis": ["Guantes Pro", "Chaqueta Lluvia"],
    "Marta": ["Pantalones Ciclismo", "Pedales Shimano"]
}

# Configuración de colores y fuentes
bg_color = "#FFFFFF"  # Blanco
text_color = "#000000"  # Negro
btn_color = "#cc0000"  # Rojo sutil para el botón
btn_text_color = "#FFFFFF"  # Color del texto del botón
font_title = ("Arial", 14, "bold")
font_label = ("Arial", 12)
font_text = ("Arial", 10)
font_bold = ("Arial", 10, "bold")  # Fuente en negrita para los nombres de los productos

# Crear la interfaz gráfica
root = tk.Tk()
root.title("RideAI")
root.configure(bg=bg_color)

# Crear y colocar widgets con estilos
tk.Label(root, text="Ingresa el nombre del cliente:", bg=bg_color, font=font_label, fg=text_color).pack(pady=5)
entry_cliente = tk.Entry(root, font=font_text)
entry_cliente.pack(pady=5)

btn_mostrar = tk.Button(root, text="Mostrar Recomendaciones", command=lambda: mostrar_recomendaciones(entry_cliente.get()), bg=btn_color, fg=btn_text_color, font=font_title)
btn_mostrar.pack(pady=10)

# Crear marcos para organizar mejor los widgets
frame_comprados = tk.Frame(root, bg=bg_color)
frame_comprados.pack(pady=5, fill=tk.X)

tk.Label(frame_comprados, text="Artículos Comprados:", bg=bg_color, font=font_label, fg=text_color).pack(pady=5)
text_comprados = tk.Text(frame_comprados, height=10, width=50, font=font_text, bg="#f0f0f0", fg=text_color)
text_comprados.pack(pady=5)

frame_recomendaciones = tk.Frame(root, bg=bg_color)
frame_recomendaciones.pack(pady=5, fill=tk.X)

tk.Label(frame_recomendaciones, text="Recomendaciones:", bg=bg_color, font=font_label, fg=text_color).pack(pady=5)
text_recomendaciones = tk.Text(frame_recomendaciones, height=10, width=50, font=font_text, bg="#f0f0f0", fg=text_color)
text_recomendaciones.pack(pady=5)

# Agregar un pie de página con el nombre de la empresa
footer = tk.Label(root, text="AIMatic INC", font=("Arial", 8), anchor="e", bg=bg_color, fg=text_color)
footer.pack(side=tk.BOTTOM, pady=10, padx=10, fill=tk.X)

def mostrar_recomendaciones(cliente_id):
    text_comprados.delete(1.0, tk.END)
    text_recomendaciones.delete(1.0, tk.END)

    if cliente_id in compras_clientes:
        productos_comprados = compras_clientes[cliente_id]
        text_comprados.insert(tk.END, "Productos comprados:\n")
        for producto in productos_comprados:
            text_comprados.insert(tk.END, f"- {producto}\n")
        
        recomendaciones = obtener_recomendaciones(productos_comprados)
        text_recomendaciones.insert(tk.END, "Recomendaciones:\n")
        for producto, (descripcion, score) in recomendaciones:
            text_recomendaciones.insert(tk.END, f"- {producto}\n  {descripcion}\n")
    else:
        text_comprados.insert(tk.END, "Cliente no encontrado.")
        text_recomendaciones.insert(tk.END, "No hay recomendaciones disponibles.")

def obtener_recomendaciones(productos_comprados):
    recomendaciones = []
    for producto in productos:
        if producto not in productos_comprados:
            score = sum([1 for p in productos_comprados if p in producto])  # Simplificado para demostración
            recomendaciones.append((producto, (productos[producto], score)))
    recomendaciones.sort(key=lambda x: x[1][1], reverse=True)
    return recomendaciones[:5]

root.mainloop()
